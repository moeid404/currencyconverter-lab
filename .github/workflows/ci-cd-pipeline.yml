name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  DOCKER_IMAGE: moeid404/currencyconverter

jobs:
  test:
    runs-on: self-hosted
    env:
      APIHOST: ${{ secrets.APIHOST }}
      APIKEY: ${{ secrets.APIKEY }}
    steps:
      - name: Check Python version
        run: python3.11 --version

      - name: Install dependencies
        run: |
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install -r requirements.txt

      - name: Run tests
        run: python3.11 -m unittest discover -s tests

  build-and-push:
    needs: test
    runs-on: self-hosted
    outputs:
      sha: ${{ steps.short-sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Get short SHA
        id: short-sha
        run: echo "sha=$(git rev-parse --short=7 ${{ github.sha }})" >> $GITHUB_OUTPUT

      - name: Prepare Docker Tags
        id: docker-tags
        run: |
          COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
          echo "COMMIT_SHA_TAG=$COMMIT_SHA" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
            TAGS="$VERSION_TAG,$COMMIT_SHA,latest"
          else
            TAGS="$COMMIT_SHA,latest"
          fi
          echo "DOCKER_IMAGE_TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and Push Docker image
        run: |
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          docker build -t $DOCKER_IMAGE .

          IFS=',' read -ra TAGS <<< "$DOCKER_IMAGE_TAGS"
          for TAG in "${TAGS[@]}"; do
            docker tag $DOCKER_IMAGE $DOCKER_IMAGE:$TAG
            docker push $DOCKER_IMAGE:$TAG
          done

  update-deployment:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Pull with Authenticated Token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git pull --rebase https://x-access-token:${GITHUB_TOKEN}@github.com/moeid404/currencyconverter-lab.git master

      - name: Update Deployment Image
        run: |
          IMAGE_TAG=${{ needs.build-and-push.outputs.sha }}
          sed -i 's|image: '${{ env.DOCKER_IMAGE }}':.*|image: '${{ env.DOCKER_IMAGE }}':'"$IMAGE_TAG"'|' k8s/base/deployment.yaml
          git add k8s/base/deployment.yaml
          git diff --cached --quiet || git commit -m "Update image version to $IMAGE_TAG"
          git push

      - name: Install Argo CD CLI (if needed)
        run: |
          if ! command -v argocd &> /dev/null; then
            echo "Installing Argo CD CLI..."
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd
          else
            echo "Argo CD CLI already installed. Skipping download."
          fi

      - name: Login to Argo CD
        run: |
          argocd login argocd.local \
            --username admin \
            --password ${ARGOCD_PASSWORD} \
            --insecure
        env:
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

      - name: Debug Argo CD User Info
        run: argocd account get-user-info --grpc-web

      - name: Sync Argo CD Application
        run: |
          argocd app sync currencyconverter-production --grpc-web
